/**
 * Service class for interacting with the GPT-3.5 Chat model provided by OpenAI.
 * This service generates responses based on given weather data.
 *
 * @author Oliver McLane
 *
 * @param openaiapikey The API key for accessing the OpenAI GPT-3.5 API.
 */
package weather.services
import com.google.gson.Gson
import com.google.gson.JsonObject
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import weather.models.WeatherData
import java.io.IOException

class GPTService(private val openaiapikey: String) {
    private val gson = Gson()
    private val client = OkHttpClient()

    /**
     * Data class representing a request to the ChatGPT model.
     * @property model The model to be used for the request.
     * @property messages The list of messages included in the request.
     */
    data class ChatGPTRequest(
        val model: String,
        val messages: List<Message>
    )

    /**
     * Data class representing a message in the ChatGPTRequest.
     * @property role The role of the message sender.
     * @property content The content of the message.
     */
    data class Message(
        val role: String,
        val content: String
    )

    /**
     * Generates a response from the ChatGPT model based on the provided weather data.
     * @param weatherData The list of weather data used to generate the response.
     * @return The response generated by the ChatGPT model.
     */
    fun getChatGPTResponse(weatherData: List<WeatherData>): String? {
        val prompt = generateWeatherInsightPrompt(weatherData)
        val requestBody = buildRequestBody(prompt)
        val request = Request.Builder()
            .url("https://api.openai.com/v1/chat/completions")
            .addHeader("Authorization", "Bearer $openaiapikey")
            .addHeader("Content-Type", "application/json")
            .post(requestBody)
            .build()

        try {
            val response = client.newCall(request).execute()
            val responseBody = response.body?.string()

            if (!response.isSuccessful) {
                throw IOException("Error retrieving response from ChatGPT: ${response.code}, $responseBody")
            }

            return parseChatGPTResponse(responseBody)
        } catch (e: IOException) {
            throw IOException("Error fetching response from ChatGPT: ${e.message}")
        }
    }

    /**
     * Builds the request body for the ChatGPT API request.
     * @param prompt The prompt to be sent to the ChatGPT model.
     * @return The request body.
     */
    private fun buildRequestBody(prompt: String): okhttp3.RequestBody {
        val requestBodyJson = ChatGPTRequest(
            model = "gpt-3.5-turbo",
            messages = listOf(
                Message("system", "You are a helpful assistant. That is providing information to a dashboard. Intepret the insight provided to you, don't provided any markdown."),
                Message("user", "Here is the weather forecast."),
                Message("assistant", prompt)
            )
        )

        val json = gson.toJson(requestBodyJson)
        return json.toRequestBody("application/json".toMediaType())
    }

    /**
     * Generates a prompt string based on the provided weather data.
     * @param weatherDataList The list of weather data used to generate the prompt.
     * @return The generated prompt string.
     */
    private fun generateWeatherInsightPrompt(weatherDataList: List<WeatherData>): String {
        val promptBuilder = StringBuilder()

        weatherDataList.forEach { weatherData ->
            with(promptBuilder) {
                append("  - Temperature: ${weatherData.temperature}째C\n")
                append("  - High Temperature: ${weatherData.highTemp}째C\n")
                append("  - Low Temperature: ${weatherData.lowTemp}째C\n")
                append("  - Felt Temperature: ${weatherData.feltTemp}째C\n")
                append("  - Humidity: ${weatherData.humidity}%\n")
                append("  - Weather Description: ${weatherData.weatherDescription}\n")
                append("  - Wind Speed: ${weatherData.windSpeed} m/s\n")
                append("  - City: ${weatherData.city}\n")
                append("  - Country Code: ${weatherData.countryCode}\n")
                append("  - Date Collected: ${weatherData.date}\n\n")
            }
        }

        promptBuilder.append("What are the key insights or trends you can identify from this forecast?\n")

        return promptBuilder.toString()
    }

    /**
     * Parses the response from the ChatGPT API.
     * @param responseBody The response body received from the ChatGPT API.
     * @return The parsed response string.
     */
    private fun parseChatGPTResponse(responseBody: String?): String? {
        if (responseBody.isNullOrEmpty()) {
            return null
        }

        return try {
            val jsonResponse = gson.fromJson(responseBody, JsonObject::class.java)
            val choices = jsonResponse.getAsJsonArray("choices")
            val message = choices[0].asJsonObject.getAsJsonObject("message")
            val content = message.getAsJsonPrimitive("content").asString
            content
        } catch (e: Exception) {
            println("Error parsing ChatGPT response: ${e.message}")
            null
        }
    }
}

